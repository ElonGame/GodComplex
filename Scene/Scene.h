//////////////////////////////////////////////////////////////////////////
// Loads a binary scene generated by the FBXTestConverter tool
//
#pragma once

class	Scene
{
protected:	// CONSTANTS

public:		// NESTED TYPES

	class	Node
	{
	public:

		enum	TYPE {
			GENERIC = 0,
			MESH,
			LIGHT,
			CAMERA,
		}					m_Type;
		Node*				m_pParent;
		int					m_ChildrenCount;
		Node**				m_ppChildren;
		NjFloat4x4			m_Local2Parent;
		NjFloat4x4			m_Local2World;

	private:
		Node( Node* _pParent, const U8*& _pData );
		~Node();

		virtual void	LoadSpecific( const U8*& _pData )	{}

		friend class Scene;
	};

	class	Light : public Node
	{
	public:

		enum	LIGHT_TYPE {
			POINT = 0,
			DIRECTIONAL,
			SPOT,
		}					m_LightType;
		NjFloat3			m_Color;
		float				m_Intensity;
		float				m_HotSpot;	// For spots only
		float				m_Falloff;	// For spots only

	private:

		Light( Node* _pParent, const U8*& _pData );
		~Light();

		virtual void	LoadSpecific( const U8*& _pData ) override;

		friend class Scene;
	};

	class	Camera : public Node
	{
	public:

		float				m_FOV;

	private:

		Camera( Node* _pParent, const U8*& _pData );
		~Camera();

		virtual void	LoadSpecific( const U8*& _pData ) override;

		friend class Scene;
	};

	class	Mesh : public Node
	{
	public:	// NESTED TYPES

		class	Primitive
		{
		public:
			U32				m_MaterialID;
			Material*		m_pMaterial;

			U32				m_FacesCount;
			U32*			m_pFaces;

			enum	VERTEX_FORMAT
			{
				P3N3G3B3T2,		// Position3, Normal3, Tangent3, BiTangent3, UV2

			}				m_VertexFormat;
			U32				m_VerticesCount;
			void*			m_pVertices;

		private:
			Primitive();
			~Primitive();

			void		Load( const U8*& _pData );

			friend class Mesh;
		};

	public:	// FIELDS

		int					m_PrimitivesCount;
		Primitive*			m_pPrimitives;

	private:

		Mesh( Node* _pParent, const U8*& _pData );
		~Mesh();

		virtual void	LoadSpecific( const U8*& _pData ) override;

		friend class Scene;
	};

	class	Material
	{
	public:	// NESTED TYPES


	public:	// FIELDS

		U32					m_ID;

	private:

		Material( const U8*& _pData );
//		~Material();

		friend class Scene;
	};


private:	// FIELDS

//	int				m_NodesCount;
	Node*			m_pROOT;

	int				m_MaterialsCount;
	Material**		m_ppMaterials;

public:		// METHODS

	Scene();
	~Scene();

	void	Load( U16 _SceneResourceID );
	void	Render( );

private:

	// Helpers
	static Node*	CreateNode( Node* _pParent, const U8*& _pData );
	static U16		ReadU16( const U8*& _pData );
	static U32		ReadU32( const U8*& _pData );
	static float	ReadF32( const U8*& _pData );
	static void		ReadEndMaterialMarker( const U8*& _pData );
	static void		ReadEndNodeMarker( const U8*& _pData );
};
