
 God Complex: A 64K Experiment
-------------------------------

	Code ► Patapom

-------------------------------
After some time, it became a bit more than a 64K intro framework actually.
It's now much much more. It's become the core framework for all my experiments...

What you will find in this framework:
	• Various libraries, including:
		◘ An image library that supports all formats the FreeImage library is supporting, plus the DDS format
			It also offers a simple and efficient plotting service as well as a HDR=>LDR conversion service
			It supports various color profiles and can be used to ensure a full control over your import/export pipeline
		
		◘ A very simple yet efficient DirectX 11 rendering library
			Don't expect a super optimized renderer here: the main goal is to quickly and easily prototype some tools and experiments!
			But don't take for a fool either: all the necessary heavy-duty structures for creating GPGPU softwares are here. Most of the
			 tools I wrote are heavily using compute shaders.
		
		◘ A multi-tier math library that is very simple to use as it mimics the vectors found in HLSL (i.e. float2, float3, float4, float4x4, etc.)
			The second tier of the library contains more involved tools like quaternions, pseudo- & quasi-random-number generators,
			 spherical harmonics support, complex numbers suppport, noise generation algorithms, etc.
			The last tier of the library contains high-level "solver" tools like Levenberg-Marquardt, BFGS, simulated annealing or other
			 linear regression tools.
			 It also offers a GPU-accelerated 1D and 2D FFT library, but also the CPU version of the FFT and DFT.
		
	• Various generators, namely:
		◘ AO Map generator, that is capable of generating high quality AO maps from height maps and normal maps
		◘ Self-Shadowed Bump Map Generator (SSBump), that is capable of generating a RGB SSBump map from a height map (cf. http://n00body.squarespace.com/journal/2010/2/7/self-shadowed-bump-maps.html)
		◘ Translucency Map Generator, that is capable of generating a RGB map encoding the translucency of a thin material lit by 3 different light positions (cf. https://www.cg.tuwien.ac.at/research/publications/2007/Habel_2007_RTT/)
		◘ A blue-noise generator that implements 3 different algorithms to generate a blue noise texture
		
	• Various tests:
		◘ Area Light implementation, as used in the Dishonored 2 title
		◘ Filmic Curve + Histogram Auto-Exposure, as used in the Dishonored 2 title
		◘ Fresnel Tests, showing the various fresnel equations (Schlick, exact, and more recently the 2-terms approximation for metals described by http://jcgt.org/published/0003/04/03/paper.pdf )
		◘ SH Irradiance encoding/decoding experiments, as described in my article about SH available at http://wiki.nuaj.net/index.php?title=SphericalHarmonicsPortal
		◘ Many others still coming up

		
What you will *NOT* find though:
	• Exactly the total amount of information in the Universe that is not represented by this amount of code and data

More precisely:
	• Everything animation-related, except some basic support for quaternions
	• Everything mesh-related, as I loathe geometry problems
	• Everything sound-related, as I never wrote anything else than graphical stuff


The framework is written in x64 C++ for the low-level part and (usually) wrapped in CLR Managed C++ for an easy C# access by the high-level tools and applications.

Minimum requirements are:
	• Windows 7
	• Visual Studio 2012
	• DotNet framework version 4.5, available from https://www.microsoft.com/en-us/download/details.aspx?id=30653
	• DirectX 11 SDK, available from https://developer.microsoft.com/en-us/windows/downloads/windows-8-1-sdk
		Especially, the D3DCompiler_46.dll needs to be deployed to the ./build/Debug and ./build/Release directories!
