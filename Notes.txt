
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Son code patché, ENFIN en cartesien !
// http://www.flight404.com/p5/molecules_1/molecules_1.pde

//  FLIGHT404 v7
//
//  Magnetic particle experiment.
//
//  Positively charged particle behavior in a gravitational field.
//
//  Thanks to Tom Carden (http://www.tom-carden.co.uk/p5/) for assistance with 
//  the vector vs. cartesian debate. He was very helpful in getting this experiment
//  to work properly.
//
//  Project began in April 2004 as an attempt to execute an explanation of the
//  physics behind magnetic particles written by 'miked' on the processing.org forum.
//  http://processing.org/discourse/yabb/YaBB.cgi?board=Contribution_Simlation;action=display;num=1082567431;start=
//

// applet size variables
int xSize           = 400;
int ySize           = 400;
int xMid            = xSize/2;
int yMid            = ySize/2;

// gravity variables
int xGrav           = 0;
int yGrav           = 0;
int zGrav           = 0;
float gxv;
float gyv;
float gzv;
float gravity       = 0.1;

// camera variables
float xMouse, yMouse;
float rotationVar;
float elevation, azimuth, twist, distance;

int totalParticles  = 0;
int maxParticles    = 720;
Particle[] particle;

int totalLights     = 0;
int maxLights       = 4;

BImage myField;

boolean gravLines = false;
boolean connections = false;
boolean orbs = true;
boolean planes = false;
boolean centerLit = false;

int counter = 0;

void setup(){
  size(xSize, ySize);
  lights();
  background(255);
  colorMode(RGB,255);
  sphereDetail(20);
  elevation = radians(15.0f);
  azimuth = radians(0.0f);
  distance = 150.0f;
  
  myField = loadImage("field.gif");
  brightToAlpha(myField);
  particle  = new Particle[maxParticles];
  for (int i=0; i<maxLights; i++){
    g.lightKind[i] = SPECULAR;
  }
}

void loop(){
  background(0,25,35);
  doCamera();
  if (totalLights > 0){
    doLights();
  }
  
  if (mousePressed && counter == 0 && totalParticles < maxParticles - 1){
    //particle[totalParticles] = new Particle(mouseX - xMid, mouseY - yMid, sin(totalParticles/4.0) * 20.0, totalParticles, 1.0);
    particle[totalParticles] = new Particle(random(-10.0,10.0),random(-10.0,10.0),random(-10.0,10.0), totalParticles, 1.0);
    totalParticles ++;
    if (totalLights < maxLights - 1){
      totalLights ++;
    }
    counter ++;
  }

  if (mouseX != pmouseX && mouseY != pmouseY){
    counter = 0;
  }

  for (int i=0; i<totalParticles; i++){
    particle[i].field();
  }
  for (int i=0; i<totalParticles; i++){
    particle[i].applyGravity();
  }
  for (int i=0; i<totalParticles; i++){
    particle[i].move();
  }
  for (int i=0; i<totalParticles; i++){
    particle[i].render();
  }

  //saveFrame("screenGrabs/magnets3_####.tif");
}

void doLights(){
  for (int i=0; i<totalLights; i++){
    if (i < totalParticles){
      g.lightX[i] = random(-1.0,1.0);
      g.lightY[i] = random(-1.0,1.0);
      g.lightZ[i] = random(-1.0,1.0);

      g.lightR[i] = random(0.35,0.4);
      g.lightG[i] = random(0.25,0.30);
      g.lightB[i] = 0.0;
    }
  }
}


void doCamera(){
  distance      = 75.0 + (totalParticles * 0.25);
  //xMouse       -= (xMouse - (xMid - mouseX)) * .2f;
  //yMouse       -= (yMouse - (yMid - mouseY)) * .2f;
  xMouse += 3.2;
  yMouse += 7.5;
  beginCamera();
  perspective(60.0f, (float)xSize / (float)ySize, 1.0f, 500);
  translate(0, 0, -distance);
  twist         = radians(xMouse / 2.0f);
  elevation     = radians(yMouse / 2.0f);
  
  rotateY(-twist);
  rotateX(elevation);
  rotateZ(-azimuth);
  endCamera();
}

void keyReleased(){
 if (key == 'o' || key == 'O'){
   if (orbs){
     orbs = false;
   } else {
     orbs = true;
   }
 } else if (key == 'g' || key == 'G'){
   if (gravLines){
     gravLines = false;
   } else {
     gravLines = true;
   }
 } else if (key == 'c' || key == 'C'){
   if (connections){
     connections = false;
   } else {
     connections = true;
   }
 } else if (key == 'p' || key == 'P'){
   if (planes){
     planes = false;
   } else {
     planes = true;
   }
 } else if (key == 'l' || key == 'L'){
   if (centerLit){
     centerLit = false;
   } else {
     centerLit = true;
   }
 } else if (key == '1'){
   gravity = 0.1;
 } else if (key == '2'){
   gravity = 0.2;
 } else if (key == '3'){
   gravity = 0.3;
 } else if (key == '4'){
   gravity = 0.5;
 } else if (key == '5'){
   gravity = 0.8;
 }
}


void mouseReleased(){
  counter = 0;
}

class Particle {
  int index;                // particle ID
  
  float x;                  // x position of particle
  float y;                  // y position of particle
  float z;                  // z position of particle
  
  float xv;                 // x velocity of particle
  float yv;                 // y velocity of particle
  float zv;                 // z velocity of particle

  float damp = 0.97;
  
  float E;                  // energy
  float tempR;              // xy distance
  float R;                  // total distance
  float F;                  // force
  float P;                  // Pauli force
  float A;                  // accel
  float Angle;              // xy angle to field center
  float ZAngle;             // z angle to field center
  float Q;                  // charge
  float M;                  // mass

  float zDepth;
  
  float gAngle;
  float gDist;
  float gZAngle;

  int totalConnections;
  
  float strokeAlpha = 0.0;
  
  float mySize;
  
  Particle(float xSent, float ySent, float zSent, int sentIndex, float sentQ){
    x         = xSent;
    y         = ySent;
    z         = zSent;

    index     = sentIndex;
    
    M         = 1.0;
    Q         = sentQ;
  }
  
  void field()
  {
    totalConnections = 0;
    for (int i=0; i<totalParticles; i++){
      if (i != index){

        R             = findDistance(x, y, z, particle[i].x, particle[i].y, particle[i].z);
        E             = particle[i].Q/(R * R);
        P             = abs(Q) * abs(particle[i].Q) / pow(R,12);
        F             = (Q * E) + P;
        A             = (F/M) * 5.0;
        if (R > 0.01) { 
           xv           += A * (x - particle[i].x) / R; 
           yv           += A * (y - particle[i].y) / R; 
           zv           += A * (z - particle[i].z) / R; 
         }

        if (R < 35.0){
          totalConnections ++;
          
          if (connections){
            strokeAlpha -= (strokeAlpha - ((35.0 - R) * 7.0)) * .1;
          } else {
            strokeAlpha -= (strokeAlpha - 0) * .1;
          }

          //stroke(225,245,255, strokeAlpha);
          //line(particle[i].x, particle[i].y, particle[i].z, x, y, z);
        }
      }
    }
    xv *= damp;
    yv *= damp;
    zv *= damp;
    
    //Q -= (Q - ((totalConnections / 5.0) + 0.5)) * .1;
  }

  void applyGravity(){
    gDist = findDistance(xGrav,yGrav,zGrav,x,y,z); 

    if (gDist > 0.1) { 
      gxv   = gravity * (xGrav - x) / gDist; 
      gyv   = gravity * (yGrav - y) / gDist; 
      gzv   = gravity * (zGrav - z) / gDist; 
  
      xv        += gxv; 
      yv        += gyv; 
      zv        += gzv; 
    }
    
    if (gravLines && gDist < 200){
      stroke(255,0,0);
      line(x, y, z, x + gxv*14.0, y + gyv*14.0, z + gzv*14.0);
    }
  }
  
  void move(){
    x += xv;
    y += yv;
    z += zv;
  }

  void render(){
    if (!orbs){
      mySize -= (mySize - 1.0) * .1;
    } else {
      mySize -= (mySize - ((totalConnections/4.0) + (255 - zDepth)/40.0)) * .5;
    }
    
    push();
    translate(x, y, z);
    zDepth = ((screenZ(0,0,0) * 100.0) - 99.0) * 500.0;
    //rotateZ(azimuth);
    //rotateX(-elevation);
    //rotateY(twist);
    
    if (orbs){
      if (centerLit){
        tint(255 - (gDist*gDist)/5.0, 255 - (gDist*gDist)/5.0, 255 - (gDist*gDist)/5.0);
      } else {
        tint(255 - (zDepth * 0.5), 255 - (zDepth * 0.7), 255 - (zDepth * 1.0));
      }
    } else {
      tint(255,255,255);
    }
    //println(tempColor);
    //image(myField, 0 - mySize/2.0, 0 - mySize/2.0, mySize, mySize);
    noStroke();
    fill(255);
    sphere(mySize*0.75);
    pop();
  }
}


// create alpha for a bitmap by analyzing brightness (code by Ryan Alexander of Motion Theory)
void brightToAlpha(BImage b){
  b.format = RGBA;
  for(int i=0; i < b.pixels.length; i++) {
    b.pixels[i] = color(255,255,255,255 - brightness(b.pixels[i]));
  }
}


// find distance between 2 points in 2D space
float findDistance(float x1, float y1, float x2, float y2){
  float xd = x1 - x2;
  float yd = y1 - y2;
  
  float td = sqrt(xd * xd + yd * yd);
  return td;
}

// find distance between 2 points in 3D space
float findDistance(float x1, float y1, float z1, float x2, float y2, float z2){
  float xd = x1 - x2;
  float yd = y1 - y2;
  float zd = z1 - z2;
  
  float xyd = sqrt(xd * xd + yd * yd);
  float td = sqrt(zd * zd + xyd * xyd);
  return td;
}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// http://flight404.com/p5/magnets2D/magnets_2.pde
// Voilà ce qu'il me faut pour les spikes de ferrofluides !

int xSize           = 400;
int ySize           = 400;
float xGrav         = xSize/2;
float yGrav         = ySize/2;
float gravity       = 0.1;

int totalParticles  = 0;
int maxParticles    = 360;
Particle[] particle;

BImage myField;

int counter = 0;

void setup(){
  size(xSize, ySize);
  background(255);
  //smooth();
  ellipseMode(CENTER_DIAMETER);
  colorMode(RGB,255);
  
  myField = loadImage("field.gif");
  brightToAlpha(myField);
  particle  = new Particle[maxParticles];
}


void loop(){
  if (mousePressed && counter == 0 && totalParticles < maxParticles - 1){
    particle[totalParticles] = new Particle(mouseX, mouseY, totalParticles, 10.0);
    totalParticles ++;
    counter ++;
  }
  
  
  if (mouseX != pmouseX && mouseY != pmouseY){
    counter = 0;
  }

  background(255);
  //if (totalParticles > 1){
    for (int i=0; i<totalParticles; i++){
      particle[i].field();
    }
    for (int i=0; i<totalParticles; i++){
      particle[i].render();
    }
    for (int i=0; i<totalParticles; i++){
      particle[i].move();
    }
    for (int i=0; i<totalParticles; i++){
      particle[i].applyGravity();
    }
  //}
}

void mouseReleased(){
  counter = 0;
}


class Particle {
  int index;
  
  float[] x;
  float[] y;
  
  float xv = random(-1.0,1.0);
  float yv = random(-1.0,1.0);
  
  int tailLength = 3;

  float myVel;
  float myAngle;
  float myDist;
  
  float[] E;      // energy
  float[] R;      // radius
  float[] F;      // force
  float[] P;      // Pauli force
  float[] A;      // accel
  float[] Angle;  // angle to field
  float Q;        // charge
  float M;        // mass

  float r = random(200.0,255.0);
  float g = random(10.0,200.0);
  float b = random(10.0);

  float totalConnections;

  float gAngle;                 // Angle to gravity center in degrees
  float gTheta;                 // Angle to gravity center in radians
  float gxv;                    // Gravity velocity along x axis
  float gyv;                    // Gravity velocity along y axis
  
  Particle(float xSent, float ySent, int sentIndex, float sentQ){
    x         = new float[tailLength];
    y         = new float[tailLength];
    for (int i=0; i<tailLength; i++){
      x[i]    = xSent;
      y[i]    = ySent;
    }

    E         = new float[maxParticles];
    R         = new float[maxParticles];
    F         = new float[maxParticles];
    P         = new float[maxParticles];
    A         = new float[maxParticles];
    Angle     = new float[maxParticles];

    index     = sentIndex;
    
    M         = 1.0;
    Q         = sentQ;
  }
  
  void field(){
    totalConnections = 0.0;
    for (int i=0; i<totalParticles; i++){
      if (i != index){
        R[i]             = findDistance(particle[i].x[0], particle[i].y[0], x[0], y[0]);
        if (R[i] < 51.0){
          totalConnections += 0.2;
          //stroke(0, (51 - R[i]) * 5.0);
          //line(particle[i].x[0], particle[i].y[0], x[0], y[0]);
        }
        E[i]             = (particle[i].Q/(R[i] * R[i]));
        E[i]             = constrain(E[i], -0.01, 0.01);
        
        P[i]             = abs(Q) * abs(particle[i].Q) / pow(R[i],12);
        F[i]             = (Q * E[i]) + P[i];
        F[i]             = (Q * E[i]);
        A[i]             = (F[i]/M) * 10.0;
		
		// Angle is only used to find the vector between the 2 particles ? Really ?
        Angle[i]         = PI-radians(findAngle(x[0], y[0], particle[i].x[0], particle[i].y[0]));
      
        xv += cos(Angle[i]) * A[i];
        yv += sin(Angle[i]) * A[i];
      }
    }
    xv *= .96;
    yv *= .96;
    Q -= (Q - (totalConnections + .5)) * .1;
  }

  void move(){
    for (int i=tailLength - 1; i>0; i--){
      x[i] = x[i-1];
      y[i] = y[i-1];
    }
    
    x[0] += xv;
    y[0] += yv;
    
    myVel   = findDistance(x[0], y[0], x[1], y[1]);
    myAngle = findAngle(x[0], y[0], x[1], y[1]);
    myDist  = findDistance(x[0], y[0], mouseX, mouseY);
  }

  void applyGravity(){
    gAngle        = -radians(findAngle(x[0],y[0],xGrav,yGrav));
    gxv           = cos(gAngle) * gravity;
    gyv           = sin(gAngle) * gravity;
    xv += gxv;
    yv += gyv;
  }
  
  void render(){
    float mySize = abs(Q) * 20.0;
    image(myField, x[0] - mySize/2.0, y[0] - mySize/2.0, mySize, mySize);
  }
}

void brightToAlpha(BImage b){
   b.format = RGBA;
   for(int i=0; i < b.pixels.length; i++) {
     b.pixels[i] = color(0,0,0,255 - brightness(b.pixels[i]));
   }
 }

float findDistance(float x1, float y1, float x2, float y2){
  float xd = x1 - x2;
  float yd = y1 - y2;
  float td = sqrt(xd * xd + yd * yd);
  return td;
}
  
float findAngle(float x1, float y1, float x2, float y2){
  float xd = x1 - x2;
  float yd = y1 - y2;

  float t = atan2(yd,xd);
  float a = (180 + (-(180 * t) / PI));
  return a;
}

//


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Check out Flight404 's magnetic code (in Java from http://flight404.com/p5/magnets2_3D/) :


// applet size variables
int xSize           = 400;
int ySize           = 400;
int xMid            = xSize/2;
int yMid            = ySize/2;

// gravity variables
int xGrav           = 0;
int yGrav           = 0;
int zGrav           = 0;
float gxv;
float gyv;
float gzv;
float gravity       = 0.1;

// camera variables
float xMouse, yMouse;
float rotationVar;
float elevation, azimuth, twist, distance;

int totalParticles  = 0;
int maxParticles    = 720;
Particle[] particle;

BImage myField;

boolean gravLines = false;
boolean connections = false;
boolean orbs = true;
boolean axis = false;

int counter = 0;

void setup(){
  size(xSize, ySize);
  //smooth();

  background(255);
  colorMode(RGB,255);
  
  elevation = radians(15.0f);
  azimuth = radians(0.0f);
  distance = 150.0f;
  
  myField = loadImage("field.gif");
  brightToAlpha(myField);
  particle  = new Particle[maxParticles];
}

void loop(){
  background(205,212,215);
  doCamera();
  
  if (mousePressed && counter == 0 && totalParticles < maxParticles - 1){
    particle[totalParticles] = new Particle(mouseX - xMid, mouseY - yMid, sin(totalParticles/4.0) * 20.0, totalParticles, 1.0);
    totalParticles ++;
    counter ++;
  }

  if (mouseX != pmouseX && mouseY != pmouseY){
    counter = 0;
  }

  for (int i=0; i<totalParticles; i++){
    particle[i].field();
  }
  for (int i=0; i<totalParticles; i++){
    particle[i].applyGravity();
  }
  for (int i=0; i<totalParticles; i++){
    particle[i].move();
  }
  if (orbs){
    for (int i=0; i<totalParticles; i++){
      particle[i].render();
    }
  }
  if (axis){
    stroke(150);
    line(0,0,-50,0,0,50);
  }
  
  //saveFrame("screenGrabs/magnets3D-####.tif");
}


void doCamera(){
  distance      = 100.0 + (totalParticles * 0.25);
  xMouse       -= (xMouse - (xMid - mouseX)) * .2f;
  yMouse       -= (yMouse - (yMid - mouseY)) * .2f;
  //xMouse += 3.2;
  //yMouse += 7.5;
  beginCamera();
  perspective(60.0f, (float)xSize / (float)ySize, 1.0f, 500);
  translate(0, 0, -distance);
  twist         = radians(xMouse / 2.0f);
  elevation     = radians(yMouse / 2.0f);
  
  rotateY(-twist);
  rotateX(elevation);
  rotateZ(-azimuth);
  endCamera();
}

void keyReleased(){
 if (key == 'o' || key == 'O'){
   if (orbs){
     orbs = false;
   } else {
     orbs = true;
   }
 } else if (key == 'g' || key == 'G'){
   if (gravLines){
     gravLines = false;
   } else {
     gravLines = true;
   }
 } else if (key == 'l' || key == 'L'){
   if (connections){
     connections = false;
   } else {
     connections = true;
   }
 } else if (key == 'a' || key == 'A'){
   if (axis){
     axis = false;
   } else {
     axis = true;
   }
 }
}


void mouseReleased(){
  counter = 0;
}

class Particle {
  int index;                // particle ID
  
  float x;                  // x position of particle
  float y;                  // y position of particle
  float z;                  // z position of particle
  
  float xv;                 // x velocity of particle
  float yv;                 // y velocity of particle
  float zv;                 // z velocity of particle

  float damp = 0.96;
  
  float E;                  // energy
  float tempR;              // xy distance
  float R;                  // total distance
  float F;                  // force
  float P;                  // Pauli force
  float A;                  // accel
  float Angle;              // xy angle to field center
  float ZAngle;             // z angle to field center
  float Q;                  // charge
  float M;                  // mass

  float zDepth;
  
  float gAngle;
  float gDist;
  float gZAngle;

  int totalConnections;
  int[] connected;
  
  float mySize;
  
  Particle(float xSent, float ySent, float zSent, int sentIndex, float sentQ){
    x         = xSent;
    y         = ySent;
    z         = zSent;

    index     = sentIndex;
    
    M         = 1.0;
    Q         = sentQ;
    
    connected = new int[100];
  }
  
  void field()
  {
    totalConnections = 0;
    for (int i=0; i<totalParticles; i++)
	{
      if (i != index){
        tempR         = findDistance(x, y, particle[i].x, particle[i].y);
        R             = findDistance(x, y, z, particle[i].x, particle[i].y, particle[i].z);
        E             = constrain((particle[i].Q/(R * R)), -0.01, 0.01);
        
      //Having trouble implementing the Pauli Exclusion force.
      //Tends to shoot particles off into distant space
      //P             = abs(Q) * abs(particle[i].Q) / pow(R,12);
      //F             = (Q * E) + P;
      
        F             = (Q * E);
        A             = (F/M) * 5.0;
        Angle         = findAngle(x, y, particle[i].x, particle[i].y);

        xv           += cos(Angle) * A;
        yv           += sin(Angle) * A;
        
        ZAngle        = findAngle(0, z, tempR, particle[i].z);
        zv           += sin(ZAngle) * A;
        
        if (R < 35.0){
          connected[totalConnections] = i;
          totalConnections ++;
          if (connections){
            stroke(0, (35 - R) * 7.0);
            line(particle[i].x, particle[i].y, particle[i].z, x, y, z);
          }
        }
      }
    }
    xv *= damp;
    yv *= damp;
    zv *= damp;
    
    //Q -= (Q - ((totalConnections / 5.0) + 0.5)) * .1;
  }

  void applyGravity()
  {
    gAngle     = findAngle(xGrav,yGrav,x,y);
    gDist      = findDistance(xGrav,yGrav,x,y);
    gZAngle    = turnAngle(gZAngle, findAngle(0,zGrav,gDist,z));
    gZAngle    = findAngle(0,zGrav,gDist,z);
    
    gxv        = cos(gAngle) * gravity;
    gyv        = sin(gAngle) * gravity;
    gzv        = sin(gZAngle) * gravity;
    
    xv        += gxv;
    yv        += gyv;
    zv        += gzv;
    
    if (gravLines){
      stroke(255,0,0);
      line(x, y, z, x + gxv*100.0, y + gyv*100.0, z + gzv*100.0);
    }
  }
  
  
  float turnAngle (float current, float target)
  { 
    // assuming current and target are both between 0 and TWO_PI 
    float angle = target - current; 
    if (angle > PI) angle -= TWO_PI; 
    if (angle < -PI) angle += TWO_PI; 
    return angle; 
  } 
  
  void move()
  {
    x += xv;
    y += yv;
    z += zv;
  }

  void render()
  {
    mySize -= (mySize - (totalConnections + (255 - zDepth)/20.0)) * .2;
    
    push();
    translate(x, y, z);
    zDepth = ((screenZ(0,0,0) * 100.0) - 99.0) * 500.0;
    rotateZ(azimuth);
    rotateX(-elevation);
    rotateY(twist);
    
    tint(zDepth * .4,zDepth * .9,zDepth * 1.0);
    //println(tempColor);
    image(myField, 0 - mySize/2.0, 0 - mySize/2.0, mySize, mySize);

    pop();
  }
}


// create alpha for a bitmap by analyzing brightness (code by Ryan Alexander of Motion Theory)
void brightToAlpha(BImage b)
{
  b.format = RGBA;
  for(int i=0; i < b.pixels.length; i++) {
    b.pixels[i] = color(255,255,255,255 - brightness(b.pixels[i]));
  }
}




// find distance between 2 points in 2D space
float findDistance(float x1, float y1, float x2, float y2)
{
  float xd = x1 - x2;
  float yd = y1 - y2;
  
  float td = sqrt(xd * xd + yd * yd);
  return td;
}

// find distance between 2 points in 3D space
float findDistance(float x1, float y1, float z1, float x2, float y2, float z2)
{
  float xd = x1 - x2;
  float yd = y1 - y2;
  float zd = z1 - z2;
  
  float xyd = sqrt(xd * xd + yd * yd);
  float td = sqrt(zd * zd + xyd * xyd);
  return td;
}

// find angle in radians between 2 points in 2D space
float findAngle(float x1, float y1, float x2, float y2)
{
  float xd = x1 - x2;
  float yd = y1 - y2;

  float t = atan2(yd,xd);
  return t;
}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// http://flight404.com/p5/magnets/magnets03.pde
int xSize           = 200;
int ySize           = 200;
float xGrav         = xSize/2;
float yGrav         = ySize/2;
float gravity       = 0.3;

int totalParticles  = 360;
Particle[] particle;

void setup(){
  size(xSize, ySize);
  background(255);
  smooth();
  ellipseMode(CENTER_DIAMETER);
  colorMode(RGB,255);

  particle  = new Particle[totalParticles];
  for (int i=0; i<totalParticles; i++){
    float tempAngle = radians(i*1.0);
    float tempxv = cos(tempAngle) * 100.0;
    float tempyv = sin(tempAngle) * 100.0;
    particle[i] = new Particle(xSize/2 + tempxv, ySize/2 + tempyv, i, 1.0);
  }

}


void loop(){
  if (mousePressed){
    gravity = -0.4;
  } else {
    gravity = 0.6;
  }
  
  xGrav           -= (xGrav - mouseX) * .4;
  yGrav           -= (yGrav - mouseY) * .4;
  background(255);
  for (int i=0; i<totalParticles; i++){
    particle[i].field();
  }
  for (int i=0; i<totalParticles; i++){
    particle[i].move();
  }
  for (int i=0; i<totalParticles; i++){
    particle[i].applyGravity();
  }
  //saveFrame("screenGrabs/magnets03-####.tif");
}


class Particle {
  int index;
  
  float[] x;
  float[] y;
  
  float xv = random(-1.0,1.0);
  float yv = random(-1.0,1.0);
  
  int tailLength = 3;

  float myVel;
  float myAngle;
  float myDist;
  
  float[] E;      // energy
  float[] R;      // radius
  float[] F;      // force
  float[] P;      // Pauli force
  float[] A;      // accel
  float[] Angle;  // angle to field
  float Q;        // charge
  float M;        // mass

  float r = random(200.0,255.0);
  float g = random(10.0,200.0);
  float b = random(10.0);

  float gAngle;                 // Angle to gravity center in degrees
  float gTheta;                 // Angle to gravity center in radians
  float gxv;                    // Gravity velocity along x axis
  float gyv;                    // Gravity velocity along y axis
  
  Particle(float xSent, float ySent, int sentIndex, float sentQ){
    x         = new float[tailLength];
    y         = new float[tailLength];
    for (int i=0; i<tailLength; i++){
      x[i]    = xSent;
      y[i]    = ySent;
    }

    E         = new float[totalParticles];
    R         = new float[totalParticles];
    F         = new float[totalParticles];
    P         = new float[totalParticles];
    A         = new float[totalParticles];
    Angle     = new float[totalParticles];

    index     = sentIndex;
    
    M         = 1.0;
    Q         = sentQ;
  }
  
  void exist(){
    field();
    move();
    applyGravity();
    //render();
  }
  
  void field(){
    for (int i=0; i<totalParticles; i++){
      if (i != index){
        R[i]             = findDistance(particle[i].x[0], particle[i].y[0], x[0], y[0]);
        if (R[i] < 20.0 && i < index){
          stroke(0, (20 - R[i]) * 10.0);
          line(particle[i].x[0], particle[i].y[0], x[0], y[0]);
        }
        E[i]             = (particle[i].Q/(R[i] * R[i]));
        E[i]             = constrain(E[i], -0.01, 0.01);
        
        P[i]             = abs(Q) * abs(particle[i].Q) / pow(R[i],12);
        F[i]             = (Q * E[i]) + P[i];
        F[i]             = (Q * E[i]);
        A[i]             = (F[i]/M) * 10.0;
        Angle[i]         = PI-radians(findAngle(x[0], y[0], particle[i].x[0], particle[i].y[0]));
      
        xv += cos(Angle[i]) * A[i];
        yv += sin(Angle[i]) * A[i];
      }
    }
    xv *= .95;
    yv *= .95;
  }

  void move(){
    for (int i=tailLength - 1; i>0; i--){
      x[i] = x[i-1];
      y[i] = y[i-1];
    }
    
    x[0] += xv;
    y[0] += yv;
    
    myVel   = findDistance(x[0], y[0], x[1], y[1]);
    myAngle = findAngle(x[0], y[0], x[1], y[1]);
    myDist  = findDistance(x[0], y[0], mouseX, mouseY);
  }

  void applyGravity(){
    gAngle        = -radians(findAngle(x[0],y[0],xGrav,yGrav));
    gxv           = cos(gAngle) * gravity;
    gyv           = sin(gAngle) * gravity;
    xv += gxv;
    yv += gyv;
  }
  
  void render(){
    noStroke();
    fill(0);
    ellipse(x[0], y[0], myVel + 5.0, myVel + 5.0);
  }
}



float findDistance(float x1, float y1, float x2, float y2){
  float xd = x1 - x2;
  float yd = y1 - y2;
  float td = sqrt(xd * xd + yd * yd);
  return td;
}
  
float findAngle(float x1, float y1, float x2, float y2){
  float xd = x1 - x2;
  float yd = y1 - y2;

  float t = atan2(yd,xd);
  float a = (180 + (-(180 * t) / PI));
  return a;
}

//
